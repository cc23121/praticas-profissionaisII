
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model PrismaCategory
 * 
 */
export type PrismaCategory = $Result.DefaultSelection<Prisma.$PrismaCategoryPayload>
/**
 * Model PrismaProduct
 * 
 */
export type PrismaProduct = $Result.DefaultSelection<Prisma.$PrismaProductPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more PrismaCategories
 * const prismaCategories = await prisma.prismaCategory.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more PrismaCategories
   * const prismaCategories = await prisma.prismaCategory.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.prismaCategory`: Exposes CRUD operations for the **PrismaCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrismaCategories
    * const prismaCategories = await prisma.prismaCategory.findMany()
    * ```
    */
  get prismaCategory(): Prisma.PrismaCategoryDelegate<ExtArgs>;

  /**
   * `prisma.prismaProduct`: Exposes CRUD operations for the **PrismaProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrismaProducts
    * const prismaProducts = await prisma.prismaProduct.findMany()
    * ```
    */
  get prismaProduct(): Prisma.PrismaProductDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    PrismaCategory: 'PrismaCategory',
    PrismaProduct: 'PrismaProduct'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'prismaCategory' | 'prismaProduct'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      PrismaCategory: {
        payload: Prisma.$PrismaCategoryPayload<ExtArgs>
        fields: Prisma.PrismaCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrismaCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrismaCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          findFirst: {
            args: Prisma.PrismaCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrismaCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          findMany: {
            args: Prisma.PrismaCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>[]
          }
          create: {
            args: Prisma.PrismaCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          createMany: {
            args: Prisma.PrismaCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PrismaCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          update: {
            args: Prisma.PrismaCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PrismaCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PrismaCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PrismaCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaCategoryPayload>
          }
          aggregate: {
            args: Prisma.PrismaCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePrismaCategory>
          }
          groupBy: {
            args: Prisma.PrismaCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PrismaCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrismaCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<PrismaCategoryCountAggregateOutputType> | number
          }
        }
      }
      PrismaProduct: {
        payload: Prisma.$PrismaProductPayload<ExtArgs>
        fields: Prisma.PrismaProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrismaProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrismaProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          findFirst: {
            args: Prisma.PrismaProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrismaProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          findMany: {
            args: Prisma.PrismaProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>[]
          }
          create: {
            args: Prisma.PrismaProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          createMany: {
            args: Prisma.PrismaProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PrismaProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          update: {
            args: Prisma.PrismaProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          deleteMany: {
            args: Prisma.PrismaProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PrismaProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PrismaProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PrismaProductPayload>
          }
          aggregate: {
            args: Prisma.PrismaProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePrismaProduct>
          }
          groupBy: {
            args: Prisma.PrismaProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PrismaProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrismaProductCountArgs<ExtArgs>,
            result: $Utils.Optional<PrismaProductCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PrismaCategoryCountOutputType
   */

  export type PrismaCategoryCountOutputType = {
    products: number
  }

  export type PrismaCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | PrismaCategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * PrismaCategoryCountOutputType without action
   */
  export type PrismaCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategoryCountOutputType
     */
    select?: PrismaCategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PrismaCategoryCountOutputType without action
   */
  export type PrismaCategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrismaProductWhereInput
  }



  /**
   * Models
   */

  /**
   * Model PrismaCategory
   */

  export type AggregatePrismaCategory = {
    _count: PrismaCategoryCountAggregateOutputType | null
    _avg: PrismaCategoryAvgAggregateOutputType | null
    _sum: PrismaCategorySumAggregateOutputType | null
    _min: PrismaCategoryMinAggregateOutputType | null
    _max: PrismaCategoryMaxAggregateOutputType | null
  }

  export type PrismaCategoryAvgAggregateOutputType = {
    idCategory: number | null
  }

  export type PrismaCategorySumAggregateOutputType = {
    idCategory: number | null
  }

  export type PrismaCategoryMinAggregateOutputType = {
    idCategory: number | null
    name: string | null
    created_at: Date | null
  }

  export type PrismaCategoryMaxAggregateOutputType = {
    idCategory: number | null
    name: string | null
    created_at: Date | null
  }

  export type PrismaCategoryCountAggregateOutputType = {
    idCategory: number
    name: number
    created_at: number
    _all: number
  }


  export type PrismaCategoryAvgAggregateInputType = {
    idCategory?: true
  }

  export type PrismaCategorySumAggregateInputType = {
    idCategory?: true
  }

  export type PrismaCategoryMinAggregateInputType = {
    idCategory?: true
    name?: true
    created_at?: true
  }

  export type PrismaCategoryMaxAggregateInputType = {
    idCategory?: true
    name?: true
    created_at?: true
  }

  export type PrismaCategoryCountAggregateInputType = {
    idCategory?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type PrismaCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaCategory to aggregate.
     */
    where?: PrismaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaCategories to fetch.
     */
    orderBy?: PrismaCategoryOrderByWithRelationInput | PrismaCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrismaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrismaCategories
    **/
    _count?: true | PrismaCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrismaCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrismaCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrismaCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrismaCategoryMaxAggregateInputType
  }

  export type GetPrismaCategoryAggregateType<T extends PrismaCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePrismaCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrismaCategory[P]>
      : GetScalarType<T[P], AggregatePrismaCategory[P]>
  }




  export type PrismaCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrismaCategoryWhereInput
    orderBy?: PrismaCategoryOrderByWithAggregationInput | PrismaCategoryOrderByWithAggregationInput[]
    by: PrismaCategoryScalarFieldEnum[] | PrismaCategoryScalarFieldEnum
    having?: PrismaCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrismaCategoryCountAggregateInputType | true
    _avg?: PrismaCategoryAvgAggregateInputType
    _sum?: PrismaCategorySumAggregateInputType
    _min?: PrismaCategoryMinAggregateInputType
    _max?: PrismaCategoryMaxAggregateInputType
  }

  export type PrismaCategoryGroupByOutputType = {
    idCategory: number
    name: string
    created_at: Date
    _count: PrismaCategoryCountAggregateOutputType | null
    _avg: PrismaCategoryAvgAggregateOutputType | null
    _sum: PrismaCategorySumAggregateOutputType | null
    _min: PrismaCategoryMinAggregateOutputType | null
    _max: PrismaCategoryMaxAggregateOutputType | null
  }

  type GetPrismaCategoryGroupByPayload<T extends PrismaCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrismaCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrismaCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrismaCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PrismaCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PrismaCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idCategory?: boolean
    name?: boolean
    created_at?: boolean
    products?: boolean | PrismaCategory$productsArgs<ExtArgs>
    _count?: boolean | PrismaCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prismaCategory"]>

  export type PrismaCategorySelectScalar = {
    idCategory?: boolean
    name?: boolean
    created_at?: boolean
  }

  export type PrismaCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | PrismaCategory$productsArgs<ExtArgs>
    _count?: boolean | PrismaCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PrismaCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrismaCategory"
    objects: {
      products: Prisma.$PrismaProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idCategory: number
      name: string
      created_at: Date
    }, ExtArgs["result"]["prismaCategory"]>
    composites: {}
  }


  type PrismaCategoryGetPayload<S extends boolean | null | undefined | PrismaCategoryDefaultArgs> = $Result.GetResult<Prisma.$PrismaCategoryPayload, S>

  type PrismaCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrismaCategoryFindManyArgs, 'select' | 'include'> & {
      select?: PrismaCategoryCountAggregateInputType | true
    }

  export interface PrismaCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrismaCategory'], meta: { name: 'PrismaCategory' } }
    /**
     * Find zero or one PrismaCategory that matches the filter.
     * @param {PrismaCategoryFindUniqueArgs} args - Arguments to find a PrismaCategory
     * @example
     * // Get one PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrismaCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PrismaCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrismaCategoryFindUniqueOrThrowArgs} args - Arguments to find a PrismaCategory
     * @example
     * // Get one PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrismaCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PrismaCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryFindFirstArgs} args - Arguments to find a PrismaCategory
     * @example
     * // Get one PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrismaCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PrismaCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryFindFirstOrThrowArgs} args - Arguments to find a PrismaCategory
     * @example
     * // Get one PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrismaCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PrismaCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrismaCategories
     * const prismaCategories = await prisma.prismaCategory.findMany()
     * 
     * // Get first 10 PrismaCategories
     * const prismaCategories = await prisma.prismaCategory.findMany({ take: 10 })
     * 
     * // Only select the `idCategory`
     * const prismaCategoryWithIdCategoryOnly = await prisma.prismaCategory.findMany({ select: { idCategory: true } })
     * 
    **/
    findMany<T extends PrismaCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PrismaCategory.
     * @param {PrismaCategoryCreateArgs} args - Arguments to create a PrismaCategory.
     * @example
     * // Create one PrismaCategory
     * const PrismaCategory = await prisma.prismaCategory.create({
     *   data: {
     *     // ... data to create a PrismaCategory
     *   }
     * })
     * 
    **/
    create<T extends PrismaCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryCreateArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PrismaCategories.
     *     @param {PrismaCategoryCreateManyArgs} args - Arguments to create many PrismaCategories.
     *     @example
     *     // Create many PrismaCategories
     *     const prismaCategory = await prisma.prismaCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrismaCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrismaCategory.
     * @param {PrismaCategoryDeleteArgs} args - Arguments to delete one PrismaCategory.
     * @example
     * // Delete one PrismaCategory
     * const PrismaCategory = await prisma.prismaCategory.delete({
     *   where: {
     *     // ... filter to delete one PrismaCategory
     *   }
     * })
     * 
    **/
    delete<T extends PrismaCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryDeleteArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PrismaCategory.
     * @param {PrismaCategoryUpdateArgs} args - Arguments to update one PrismaCategory.
     * @example
     * // Update one PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrismaCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryUpdateArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PrismaCategories.
     * @param {PrismaCategoryDeleteManyArgs} args - Arguments to filter PrismaCategories to delete.
     * @example
     * // Delete a few PrismaCategories
     * const { count } = await prisma.prismaCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrismaCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrismaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrismaCategories
     * const prismaCategory = await prisma.prismaCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrismaCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrismaCategory.
     * @param {PrismaCategoryUpsertArgs} args - Arguments to update or create a PrismaCategory.
     * @example
     * // Update or create a PrismaCategory
     * const prismaCategory = await prisma.prismaCategory.upsert({
     *   create: {
     *     // ... data to create a PrismaCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrismaCategory we want to update
     *   }
     * })
    **/
    upsert<T extends PrismaCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaCategoryUpsertArgs<ExtArgs>>
    ): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PrismaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryCountArgs} args - Arguments to filter PrismaCategories to count.
     * @example
     * // Count the number of PrismaCategories
     * const count = await prisma.prismaCategory.count({
     *   where: {
     *     // ... the filter for the PrismaCategories we want to count
     *   }
     * })
    **/
    count<T extends PrismaCategoryCountArgs>(
      args?: Subset<T, PrismaCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrismaCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrismaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrismaCategoryAggregateArgs>(args: Subset<T, PrismaCategoryAggregateArgs>): Prisma.PrismaPromise<GetPrismaCategoryAggregateType<T>>

    /**
     * Group by PrismaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrismaCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrismaCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PrismaCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrismaCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrismaCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrismaCategory model
   */
  readonly fields: PrismaCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrismaCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrismaCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends PrismaCategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, PrismaCategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PrismaCategory model
   */ 
  interface PrismaCategoryFieldRefs {
    readonly idCategory: FieldRef<"PrismaCategory", 'Int'>
    readonly name: FieldRef<"PrismaCategory", 'String'>
    readonly created_at: FieldRef<"PrismaCategory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PrismaCategory findUnique
   */
  export type PrismaCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PrismaCategory to fetch.
     */
    where: PrismaCategoryWhereUniqueInput
  }


  /**
   * PrismaCategory findUniqueOrThrow
   */
  export type PrismaCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PrismaCategory to fetch.
     */
    where: PrismaCategoryWhereUniqueInput
  }


  /**
   * PrismaCategory findFirst
   */
  export type PrismaCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PrismaCategory to fetch.
     */
    where?: PrismaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaCategories to fetch.
     */
    orderBy?: PrismaCategoryOrderByWithRelationInput | PrismaCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaCategories.
     */
    cursor?: PrismaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaCategories.
     */
    distinct?: PrismaCategoryScalarFieldEnum | PrismaCategoryScalarFieldEnum[]
  }


  /**
   * PrismaCategory findFirstOrThrow
   */
  export type PrismaCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PrismaCategory to fetch.
     */
    where?: PrismaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaCategories to fetch.
     */
    orderBy?: PrismaCategoryOrderByWithRelationInput | PrismaCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaCategories.
     */
    cursor?: PrismaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaCategories.
     */
    distinct?: PrismaCategoryScalarFieldEnum | PrismaCategoryScalarFieldEnum[]
  }


  /**
   * PrismaCategory findMany
   */
  export type PrismaCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PrismaCategories to fetch.
     */
    where?: PrismaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaCategories to fetch.
     */
    orderBy?: PrismaCategoryOrderByWithRelationInput | PrismaCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrismaCategories.
     */
    cursor?: PrismaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaCategories.
     */
    skip?: number
    distinct?: PrismaCategoryScalarFieldEnum | PrismaCategoryScalarFieldEnum[]
  }


  /**
   * PrismaCategory create
   */
  export type PrismaCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PrismaCategory.
     */
    data: XOR<PrismaCategoryCreateInput, PrismaCategoryUncheckedCreateInput>
  }


  /**
   * PrismaCategory createMany
   */
  export type PrismaCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrismaCategories.
     */
    data: PrismaCategoryCreateManyInput | PrismaCategoryCreateManyInput[]
  }


  /**
   * PrismaCategory update
   */
  export type PrismaCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PrismaCategory.
     */
    data: XOR<PrismaCategoryUpdateInput, PrismaCategoryUncheckedUpdateInput>
    /**
     * Choose, which PrismaCategory to update.
     */
    where: PrismaCategoryWhereUniqueInput
  }


  /**
   * PrismaCategory updateMany
   */
  export type PrismaCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrismaCategories.
     */
    data: XOR<PrismaCategoryUpdateManyMutationInput, PrismaCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PrismaCategories to update
     */
    where?: PrismaCategoryWhereInput
  }


  /**
   * PrismaCategory upsert
   */
  export type PrismaCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PrismaCategory to update in case it exists.
     */
    where: PrismaCategoryWhereUniqueInput
    /**
     * In case the PrismaCategory found by the `where` argument doesn't exist, create a new PrismaCategory with this data.
     */
    create: XOR<PrismaCategoryCreateInput, PrismaCategoryUncheckedCreateInput>
    /**
     * In case the PrismaCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrismaCategoryUpdateInput, PrismaCategoryUncheckedUpdateInput>
  }


  /**
   * PrismaCategory delete
   */
  export type PrismaCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
    /**
     * Filter which PrismaCategory to delete.
     */
    where: PrismaCategoryWhereUniqueInput
  }


  /**
   * PrismaCategory deleteMany
   */
  export type PrismaCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaCategories to delete
     */
    where?: PrismaCategoryWhereInput
  }


  /**
   * PrismaCategory.products
   */
  export type PrismaCategory$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    where?: PrismaProductWhereInput
    orderBy?: PrismaProductOrderByWithRelationInput | PrismaProductOrderByWithRelationInput[]
    cursor?: PrismaProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrismaProductScalarFieldEnum | PrismaProductScalarFieldEnum[]
  }


  /**
   * PrismaCategory without action
   */
  export type PrismaCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaCategory
     */
    select?: PrismaCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaCategoryInclude<ExtArgs> | null
  }



  /**
   * Model PrismaProduct
   */

  export type AggregatePrismaProduct = {
    _count: PrismaProductCountAggregateOutputType | null
    _avg: PrismaProductAvgAggregateOutputType | null
    _sum: PrismaProductSumAggregateOutputType | null
    _min: PrismaProductMinAggregateOutputType | null
    _max: PrismaProductMaxAggregateOutputType | null
  }

  export type PrismaProductAvgAggregateOutputType = {
    idProduct: number | null
    price: number | null
    categoryId: number | null
  }

  export type PrismaProductSumAggregateOutputType = {
    idProduct: number | null
    price: number | null
    categoryId: number | null
  }

  export type PrismaProductMinAggregateOutputType = {
    idProduct: number | null
    name: string | null
    price: number | null
    categoryId: number | null
    created_at: Date | null
  }

  export type PrismaProductMaxAggregateOutputType = {
    idProduct: number | null
    name: string | null
    price: number | null
    categoryId: number | null
    created_at: Date | null
  }

  export type PrismaProductCountAggregateOutputType = {
    idProduct: number
    name: number
    price: number
    categoryId: number
    created_at: number
    _all: number
  }


  export type PrismaProductAvgAggregateInputType = {
    idProduct?: true
    price?: true
    categoryId?: true
  }

  export type PrismaProductSumAggregateInputType = {
    idProduct?: true
    price?: true
    categoryId?: true
  }

  export type PrismaProductMinAggregateInputType = {
    idProduct?: true
    name?: true
    price?: true
    categoryId?: true
    created_at?: true
  }

  export type PrismaProductMaxAggregateInputType = {
    idProduct?: true
    name?: true
    price?: true
    categoryId?: true
    created_at?: true
  }

  export type PrismaProductCountAggregateInputType = {
    idProduct?: true
    name?: true
    price?: true
    categoryId?: true
    created_at?: true
    _all?: true
  }

  export type PrismaProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaProduct to aggregate.
     */
    where?: PrismaProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaProducts to fetch.
     */
    orderBy?: PrismaProductOrderByWithRelationInput | PrismaProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrismaProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrismaProducts
    **/
    _count?: true | PrismaProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrismaProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrismaProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrismaProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrismaProductMaxAggregateInputType
  }

  export type GetPrismaProductAggregateType<T extends PrismaProductAggregateArgs> = {
        [P in keyof T & keyof AggregatePrismaProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrismaProduct[P]>
      : GetScalarType<T[P], AggregatePrismaProduct[P]>
  }




  export type PrismaProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrismaProductWhereInput
    orderBy?: PrismaProductOrderByWithAggregationInput | PrismaProductOrderByWithAggregationInput[]
    by: PrismaProductScalarFieldEnum[] | PrismaProductScalarFieldEnum
    having?: PrismaProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrismaProductCountAggregateInputType | true
    _avg?: PrismaProductAvgAggregateInputType
    _sum?: PrismaProductSumAggregateInputType
    _min?: PrismaProductMinAggregateInputType
    _max?: PrismaProductMaxAggregateInputType
  }

  export type PrismaProductGroupByOutputType = {
    idProduct: number
    name: string
    price: number
    categoryId: number
    created_at: Date
    _count: PrismaProductCountAggregateOutputType | null
    _avg: PrismaProductAvgAggregateOutputType | null
    _sum: PrismaProductSumAggregateOutputType | null
    _min: PrismaProductMinAggregateOutputType | null
    _max: PrismaProductMaxAggregateOutputType | null
  }

  type GetPrismaProductGroupByPayload<T extends PrismaProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrismaProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrismaProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrismaProductGroupByOutputType[P]>
            : GetScalarType<T[P], PrismaProductGroupByOutputType[P]>
        }
      >
    >


  export type PrismaProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idProduct?: boolean
    name?: boolean
    price?: boolean
    categoryId?: boolean
    created_at?: boolean
    Category?: boolean | PrismaCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prismaProduct"]>

  export type PrismaProductSelectScalar = {
    idProduct?: boolean
    name?: boolean
    price?: boolean
    categoryId?: boolean
    created_at?: boolean
  }

  export type PrismaProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Category?: boolean | PrismaCategoryDefaultArgs<ExtArgs>
  }


  export type $PrismaProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrismaProduct"
    objects: {
      Category: Prisma.$PrismaCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idProduct: number
      name: string
      price: number
      categoryId: number
      created_at: Date
    }, ExtArgs["result"]["prismaProduct"]>
    composites: {}
  }


  type PrismaProductGetPayload<S extends boolean | null | undefined | PrismaProductDefaultArgs> = $Result.GetResult<Prisma.$PrismaProductPayload, S>

  type PrismaProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PrismaProductFindManyArgs, 'select' | 'include'> & {
      select?: PrismaProductCountAggregateInputType | true
    }

  export interface PrismaProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrismaProduct'], meta: { name: 'PrismaProduct' } }
    /**
     * Find zero or one PrismaProduct that matches the filter.
     * @param {PrismaProductFindUniqueArgs} args - Arguments to find a PrismaProduct
     * @example
     * // Get one PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrismaProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductFindUniqueArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PrismaProduct that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrismaProductFindUniqueOrThrowArgs} args - Arguments to find a PrismaProduct
     * @example
     * // Get one PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrismaProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PrismaProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductFindFirstArgs} args - Arguments to find a PrismaProduct
     * @example
     * // Get one PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrismaProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductFindFirstArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PrismaProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductFindFirstOrThrowArgs} args - Arguments to find a PrismaProduct
     * @example
     * // Get one PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrismaProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PrismaProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrismaProducts
     * const prismaProducts = await prisma.prismaProduct.findMany()
     * 
     * // Get first 10 PrismaProducts
     * const prismaProducts = await prisma.prismaProduct.findMany({ take: 10 })
     * 
     * // Only select the `idProduct`
     * const prismaProductWithIdProductOnly = await prisma.prismaProduct.findMany({ select: { idProduct: true } })
     * 
    **/
    findMany<T extends PrismaProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PrismaProduct.
     * @param {PrismaProductCreateArgs} args - Arguments to create a PrismaProduct.
     * @example
     * // Create one PrismaProduct
     * const PrismaProduct = await prisma.prismaProduct.create({
     *   data: {
     *     // ... data to create a PrismaProduct
     *   }
     * })
     * 
    **/
    create<T extends PrismaProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductCreateArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PrismaProducts.
     *     @param {PrismaProductCreateManyArgs} args - Arguments to create many PrismaProducts.
     *     @example
     *     // Create many PrismaProducts
     *     const prismaProduct = await prisma.prismaProduct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrismaProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrismaProduct.
     * @param {PrismaProductDeleteArgs} args - Arguments to delete one PrismaProduct.
     * @example
     * // Delete one PrismaProduct
     * const PrismaProduct = await prisma.prismaProduct.delete({
     *   where: {
     *     // ... filter to delete one PrismaProduct
     *   }
     * })
     * 
    **/
    delete<T extends PrismaProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductDeleteArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PrismaProduct.
     * @param {PrismaProductUpdateArgs} args - Arguments to update one PrismaProduct.
     * @example
     * // Update one PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrismaProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductUpdateArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PrismaProducts.
     * @param {PrismaProductDeleteManyArgs} args - Arguments to filter PrismaProducts to delete.
     * @example
     * // Delete a few PrismaProducts
     * const { count } = await prisma.prismaProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrismaProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PrismaProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrismaProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrismaProducts
     * const prismaProduct = await prisma.prismaProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrismaProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrismaProduct.
     * @param {PrismaProductUpsertArgs} args - Arguments to update or create a PrismaProduct.
     * @example
     * // Update or create a PrismaProduct
     * const prismaProduct = await prisma.prismaProduct.upsert({
     *   create: {
     *     // ... data to create a PrismaProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrismaProduct we want to update
     *   }
     * })
    **/
    upsert<T extends PrismaProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PrismaProductUpsertArgs<ExtArgs>>
    ): Prisma__PrismaProductClient<$Result.GetResult<Prisma.$PrismaProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PrismaProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductCountArgs} args - Arguments to filter PrismaProducts to count.
     * @example
     * // Count the number of PrismaProducts
     * const count = await prisma.prismaProduct.count({
     *   where: {
     *     // ... the filter for the PrismaProducts we want to count
     *   }
     * })
    **/
    count<T extends PrismaProductCountArgs>(
      args?: Subset<T, PrismaProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrismaProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrismaProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrismaProductAggregateArgs>(args: Subset<T, PrismaProductAggregateArgs>): Prisma.PrismaPromise<GetPrismaProductAggregateType<T>>

    /**
     * Group by PrismaProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrismaProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrismaProductGroupByArgs['orderBy'] }
        : { orderBy?: PrismaProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrismaProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrismaProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrismaProduct model
   */
  readonly fields: PrismaProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrismaProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrismaProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Category<T extends PrismaCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrismaCategoryDefaultArgs<ExtArgs>>): Prisma__PrismaCategoryClient<$Result.GetResult<Prisma.$PrismaCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PrismaProduct model
   */ 
  interface PrismaProductFieldRefs {
    readonly idProduct: FieldRef<"PrismaProduct", 'Int'>
    readonly name: FieldRef<"PrismaProduct", 'String'>
    readonly price: FieldRef<"PrismaProduct", 'Float'>
    readonly categoryId: FieldRef<"PrismaProduct", 'Int'>
    readonly created_at: FieldRef<"PrismaProduct", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PrismaProduct findUnique
   */
  export type PrismaProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter, which PrismaProduct to fetch.
     */
    where: PrismaProductWhereUniqueInput
  }


  /**
   * PrismaProduct findUniqueOrThrow
   */
  export type PrismaProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter, which PrismaProduct to fetch.
     */
    where: PrismaProductWhereUniqueInput
  }


  /**
   * PrismaProduct findFirst
   */
  export type PrismaProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter, which PrismaProduct to fetch.
     */
    where?: PrismaProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaProducts to fetch.
     */
    orderBy?: PrismaProductOrderByWithRelationInput | PrismaProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaProducts.
     */
    cursor?: PrismaProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaProducts.
     */
    distinct?: PrismaProductScalarFieldEnum | PrismaProductScalarFieldEnum[]
  }


  /**
   * PrismaProduct findFirstOrThrow
   */
  export type PrismaProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter, which PrismaProduct to fetch.
     */
    where?: PrismaProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaProducts to fetch.
     */
    orderBy?: PrismaProductOrderByWithRelationInput | PrismaProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaProducts.
     */
    cursor?: PrismaProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaProducts.
     */
    distinct?: PrismaProductScalarFieldEnum | PrismaProductScalarFieldEnum[]
  }


  /**
   * PrismaProduct findMany
   */
  export type PrismaProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter, which PrismaProducts to fetch.
     */
    where?: PrismaProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaProducts to fetch.
     */
    orderBy?: PrismaProductOrderByWithRelationInput | PrismaProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrismaProducts.
     */
    cursor?: PrismaProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaProducts.
     */
    skip?: number
    distinct?: PrismaProductScalarFieldEnum | PrismaProductScalarFieldEnum[]
  }


  /**
   * PrismaProduct create
   */
  export type PrismaProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * The data needed to create a PrismaProduct.
     */
    data: XOR<PrismaProductCreateInput, PrismaProductUncheckedCreateInput>
  }


  /**
   * PrismaProduct createMany
   */
  export type PrismaProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrismaProducts.
     */
    data: PrismaProductCreateManyInput | PrismaProductCreateManyInput[]
  }


  /**
   * PrismaProduct update
   */
  export type PrismaProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * The data needed to update a PrismaProduct.
     */
    data: XOR<PrismaProductUpdateInput, PrismaProductUncheckedUpdateInput>
    /**
     * Choose, which PrismaProduct to update.
     */
    where: PrismaProductWhereUniqueInput
  }


  /**
   * PrismaProduct updateMany
   */
  export type PrismaProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrismaProducts.
     */
    data: XOR<PrismaProductUpdateManyMutationInput, PrismaProductUncheckedUpdateManyInput>
    /**
     * Filter which PrismaProducts to update
     */
    where?: PrismaProductWhereInput
  }


  /**
   * PrismaProduct upsert
   */
  export type PrismaProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * The filter to search for the PrismaProduct to update in case it exists.
     */
    where: PrismaProductWhereUniqueInput
    /**
     * In case the PrismaProduct found by the `where` argument doesn't exist, create a new PrismaProduct with this data.
     */
    create: XOR<PrismaProductCreateInput, PrismaProductUncheckedCreateInput>
    /**
     * In case the PrismaProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrismaProductUpdateInput, PrismaProductUncheckedUpdateInput>
  }


  /**
   * PrismaProduct delete
   */
  export type PrismaProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
    /**
     * Filter which PrismaProduct to delete.
     */
    where: PrismaProductWhereUniqueInput
  }


  /**
   * PrismaProduct deleteMany
   */
  export type PrismaProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaProducts to delete
     */
    where?: PrismaProductWhereInput
  }


  /**
   * PrismaProduct without action
   */
  export type PrismaProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaProduct
     */
    select?: PrismaProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrismaProductInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PrismaCategoryScalarFieldEnum: {
    idCategory: 'idCategory',
    name: 'name',
    created_at: 'created_at'
  };

  export type PrismaCategoryScalarFieldEnum = (typeof PrismaCategoryScalarFieldEnum)[keyof typeof PrismaCategoryScalarFieldEnum]


  export const PrismaProductScalarFieldEnum: {
    idProduct: 'idProduct',
    name: 'name',
    price: 'price',
    categoryId: 'categoryId',
    created_at: 'created_at'
  };

  export type PrismaProductScalarFieldEnum = (typeof PrismaProductScalarFieldEnum)[keyof typeof PrismaProductScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type PrismaCategoryWhereInput = {
    AND?: PrismaCategoryWhereInput | PrismaCategoryWhereInput[]
    OR?: PrismaCategoryWhereInput[]
    NOT?: PrismaCategoryWhereInput | PrismaCategoryWhereInput[]
    idCategory?: IntFilter<"PrismaCategory"> | number
    name?: StringFilter<"PrismaCategory"> | string
    created_at?: DateTimeFilter<"PrismaCategory"> | Date | string
    products?: PrismaProductListRelationFilter
  }

  export type PrismaCategoryOrderByWithRelationInput = {
    idCategory?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    products?: PrismaProductOrderByRelationAggregateInput
  }

  export type PrismaCategoryWhereUniqueInput = Prisma.AtLeast<{
    idCategory?: number
    name?: string
    AND?: PrismaCategoryWhereInput | PrismaCategoryWhereInput[]
    OR?: PrismaCategoryWhereInput[]
    NOT?: PrismaCategoryWhereInput | PrismaCategoryWhereInput[]
    created_at?: DateTimeFilter<"PrismaCategory"> | Date | string
    products?: PrismaProductListRelationFilter
  }, "idCategory" | "name">

  export type PrismaCategoryOrderByWithAggregationInput = {
    idCategory?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: PrismaCategoryCountOrderByAggregateInput
    _avg?: PrismaCategoryAvgOrderByAggregateInput
    _max?: PrismaCategoryMaxOrderByAggregateInput
    _min?: PrismaCategoryMinOrderByAggregateInput
    _sum?: PrismaCategorySumOrderByAggregateInput
  }

  export type PrismaCategoryScalarWhereWithAggregatesInput = {
    AND?: PrismaCategoryScalarWhereWithAggregatesInput | PrismaCategoryScalarWhereWithAggregatesInput[]
    OR?: PrismaCategoryScalarWhereWithAggregatesInput[]
    NOT?: PrismaCategoryScalarWhereWithAggregatesInput | PrismaCategoryScalarWhereWithAggregatesInput[]
    idCategory?: IntWithAggregatesFilter<"PrismaCategory"> | number
    name?: StringWithAggregatesFilter<"PrismaCategory"> | string
    created_at?: DateTimeWithAggregatesFilter<"PrismaCategory"> | Date | string
  }

  export type PrismaProductWhereInput = {
    AND?: PrismaProductWhereInput | PrismaProductWhereInput[]
    OR?: PrismaProductWhereInput[]
    NOT?: PrismaProductWhereInput | PrismaProductWhereInput[]
    idProduct?: IntFilter<"PrismaProduct"> | number
    name?: StringFilter<"PrismaProduct"> | string
    price?: FloatFilter<"PrismaProduct"> | number
    categoryId?: IntFilter<"PrismaProduct"> | number
    created_at?: DateTimeFilter<"PrismaProduct"> | Date | string
    Category?: XOR<PrismaCategoryRelationFilter, PrismaCategoryWhereInput>
  }

  export type PrismaProductOrderByWithRelationInput = {
    idProduct?: SortOrder
    name?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    Category?: PrismaCategoryOrderByWithRelationInput
  }

  export type PrismaProductWhereUniqueInput = Prisma.AtLeast<{
    idProduct?: number
    name?: string
    AND?: PrismaProductWhereInput | PrismaProductWhereInput[]
    OR?: PrismaProductWhereInput[]
    NOT?: PrismaProductWhereInput | PrismaProductWhereInput[]
    price?: FloatFilter<"PrismaProduct"> | number
    categoryId?: IntFilter<"PrismaProduct"> | number
    created_at?: DateTimeFilter<"PrismaProduct"> | Date | string
    Category?: XOR<PrismaCategoryRelationFilter, PrismaCategoryWhereInput>
  }, "idProduct" | "name">

  export type PrismaProductOrderByWithAggregationInput = {
    idProduct?: SortOrder
    name?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    _count?: PrismaProductCountOrderByAggregateInput
    _avg?: PrismaProductAvgOrderByAggregateInput
    _max?: PrismaProductMaxOrderByAggregateInput
    _min?: PrismaProductMinOrderByAggregateInput
    _sum?: PrismaProductSumOrderByAggregateInput
  }

  export type PrismaProductScalarWhereWithAggregatesInput = {
    AND?: PrismaProductScalarWhereWithAggregatesInput | PrismaProductScalarWhereWithAggregatesInput[]
    OR?: PrismaProductScalarWhereWithAggregatesInput[]
    NOT?: PrismaProductScalarWhereWithAggregatesInput | PrismaProductScalarWhereWithAggregatesInput[]
    idProduct?: IntWithAggregatesFilter<"PrismaProduct"> | number
    name?: StringWithAggregatesFilter<"PrismaProduct"> | string
    price?: FloatWithAggregatesFilter<"PrismaProduct"> | number
    categoryId?: IntWithAggregatesFilter<"PrismaProduct"> | number
    created_at?: DateTimeWithAggregatesFilter<"PrismaProduct"> | Date | string
  }

  export type PrismaCategoryCreateInput = {
    name: string
    created_at?: Date | string
    products?: PrismaProductCreateNestedManyWithoutCategoryInput
  }

  export type PrismaCategoryUncheckedCreateInput = {
    idCategory?: number
    name: string
    created_at?: Date | string
    products?: PrismaProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type PrismaCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PrismaProductUpdateManyWithoutCategoryNestedInput
  }

  export type PrismaCategoryUncheckedUpdateInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: PrismaProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PrismaCategoryCreateManyInput = {
    name: string
    created_at?: Date | string
  }

  export type PrismaCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaCategoryUncheckedUpdateManyInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductCreateInput = {
    name: string
    price: number
    created_at?: Date | string
    Category: PrismaCategoryCreateNestedOneWithoutProductsInput
  }

  export type PrismaProductUncheckedCreateInput = {
    idProduct?: number
    name: string
    price: number
    categoryId: number
    created_at?: Date | string
  }

  export type PrismaProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Category?: PrismaCategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type PrismaProductUncheckedUpdateInput = {
    idProduct?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductCreateManyInput = {
    name: string
    price: number
    categoryId: number
    created_at?: Date | string
  }

  export type PrismaProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductUncheckedUpdateManyInput = {
    idProduct?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PrismaProductListRelationFilter = {
    every?: PrismaProductWhereInput
    some?: PrismaProductWhereInput
    none?: PrismaProductWhereInput
  }

  export type PrismaProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrismaCategoryCountOrderByAggregateInput = {
    idCategory?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaCategoryAvgOrderByAggregateInput = {
    idCategory?: SortOrder
  }

  export type PrismaCategoryMaxOrderByAggregateInput = {
    idCategory?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaCategoryMinOrderByAggregateInput = {
    idCategory?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaCategorySumOrderByAggregateInput = {
    idCategory?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PrismaCategoryRelationFilter = {
    is?: PrismaCategoryWhereInput
    isNot?: PrismaCategoryWhereInput
  }

  export type PrismaProductCountOrderByAggregateInput = {
    idProduct?: SortOrder
    name?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaProductAvgOrderByAggregateInput = {
    idProduct?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
  }

  export type PrismaProductMaxOrderByAggregateInput = {
    idProduct?: SortOrder
    name?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaProductMinOrderByAggregateInput = {
    idProduct?: SortOrder
    name?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
  }

  export type PrismaProductSumOrderByAggregateInput = {
    idProduct?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PrismaProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput> | PrismaProductCreateWithoutCategoryInput[] | PrismaProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PrismaProductCreateOrConnectWithoutCategoryInput | PrismaProductCreateOrConnectWithoutCategoryInput[]
    createMany?: PrismaProductCreateManyCategoryInputEnvelope
    connect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
  }

  export type PrismaProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput> | PrismaProductCreateWithoutCategoryInput[] | PrismaProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PrismaProductCreateOrConnectWithoutCategoryInput | PrismaProductCreateOrConnectWithoutCategoryInput[]
    createMany?: PrismaProductCreateManyCategoryInputEnvelope
    connect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PrismaProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput> | PrismaProductCreateWithoutCategoryInput[] | PrismaProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PrismaProductCreateOrConnectWithoutCategoryInput | PrismaProductCreateOrConnectWithoutCategoryInput[]
    upsert?: PrismaProductUpsertWithWhereUniqueWithoutCategoryInput | PrismaProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PrismaProductCreateManyCategoryInputEnvelope
    set?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    disconnect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    delete?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    connect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    update?: PrismaProductUpdateWithWhereUniqueWithoutCategoryInput | PrismaProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PrismaProductUpdateManyWithWhereWithoutCategoryInput | PrismaProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PrismaProductScalarWhereInput | PrismaProductScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PrismaProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput> | PrismaProductCreateWithoutCategoryInput[] | PrismaProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PrismaProductCreateOrConnectWithoutCategoryInput | PrismaProductCreateOrConnectWithoutCategoryInput[]
    upsert?: PrismaProductUpsertWithWhereUniqueWithoutCategoryInput | PrismaProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PrismaProductCreateManyCategoryInputEnvelope
    set?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    disconnect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    delete?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    connect?: PrismaProductWhereUniqueInput | PrismaProductWhereUniqueInput[]
    update?: PrismaProductUpdateWithWhereUniqueWithoutCategoryInput | PrismaProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PrismaProductUpdateManyWithWhereWithoutCategoryInput | PrismaProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PrismaProductScalarWhereInput | PrismaProductScalarWhereInput[]
  }

  export type PrismaCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<PrismaCategoryCreateWithoutProductsInput, PrismaCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: PrismaCategoryCreateOrConnectWithoutProductsInput
    connect?: PrismaCategoryWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PrismaCategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<PrismaCategoryCreateWithoutProductsInput, PrismaCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: PrismaCategoryCreateOrConnectWithoutProductsInput
    upsert?: PrismaCategoryUpsertWithoutProductsInput
    connect?: PrismaCategoryWhereUniqueInput
    update?: XOR<XOR<PrismaCategoryUpdateToOneWithWhereWithoutProductsInput, PrismaCategoryUpdateWithoutProductsInput>, PrismaCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PrismaProductCreateWithoutCategoryInput = {
    name: string
    price: number
    created_at?: Date | string
  }

  export type PrismaProductUncheckedCreateWithoutCategoryInput = {
    idProduct?: number
    name: string
    price: number
    created_at?: Date | string
  }

  export type PrismaProductCreateOrConnectWithoutCategoryInput = {
    where: PrismaProductWhereUniqueInput
    create: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput>
  }

  export type PrismaProductCreateManyCategoryInputEnvelope = {
    data: PrismaProductCreateManyCategoryInput | PrismaProductCreateManyCategoryInput[]
  }

  export type PrismaProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PrismaProductWhereUniqueInput
    update: XOR<PrismaProductUpdateWithoutCategoryInput, PrismaProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<PrismaProductCreateWithoutCategoryInput, PrismaProductUncheckedCreateWithoutCategoryInput>
  }

  export type PrismaProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PrismaProductWhereUniqueInput
    data: XOR<PrismaProductUpdateWithoutCategoryInput, PrismaProductUncheckedUpdateWithoutCategoryInput>
  }

  export type PrismaProductUpdateManyWithWhereWithoutCategoryInput = {
    where: PrismaProductScalarWhereInput
    data: XOR<PrismaProductUpdateManyMutationInput, PrismaProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PrismaProductScalarWhereInput = {
    AND?: PrismaProductScalarWhereInput | PrismaProductScalarWhereInput[]
    OR?: PrismaProductScalarWhereInput[]
    NOT?: PrismaProductScalarWhereInput | PrismaProductScalarWhereInput[]
    idProduct?: IntFilter<"PrismaProduct"> | number
    name?: StringFilter<"PrismaProduct"> | string
    price?: FloatFilter<"PrismaProduct"> | number
    categoryId?: IntFilter<"PrismaProduct"> | number
    created_at?: DateTimeFilter<"PrismaProduct"> | Date | string
  }

  export type PrismaCategoryCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string
  }

  export type PrismaCategoryUncheckedCreateWithoutProductsInput = {
    idCategory?: number
    name: string
    created_at?: Date | string
  }

  export type PrismaCategoryCreateOrConnectWithoutProductsInput = {
    where: PrismaCategoryWhereUniqueInput
    create: XOR<PrismaCategoryCreateWithoutProductsInput, PrismaCategoryUncheckedCreateWithoutProductsInput>
  }

  export type PrismaCategoryUpsertWithoutProductsInput = {
    update: XOR<PrismaCategoryUpdateWithoutProductsInput, PrismaCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<PrismaCategoryCreateWithoutProductsInput, PrismaCategoryUncheckedCreateWithoutProductsInput>
    where?: PrismaCategoryWhereInput
  }

  export type PrismaCategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: PrismaCategoryWhereInput
    data: XOR<PrismaCategoryUpdateWithoutProductsInput, PrismaCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type PrismaCategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaCategoryUncheckedUpdateWithoutProductsInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductCreateManyCategoryInput = {
    name: string
    price: number
    created_at?: Date | string
  }

  export type PrismaProductUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductUncheckedUpdateWithoutCategoryInput = {
    idProduct?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaProductUncheckedUpdateManyWithoutCategoryInput = {
    idProduct?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PrismaCategoryCountOutputTypeDefaultArgs instead
     */
    export type PrismaCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrismaCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrismaCategoryDefaultArgs instead
     */
    export type PrismaCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrismaCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrismaProductDefaultArgs instead
     */
    export type PrismaProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrismaProductDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}